# This pipeline is triggered whenever there are changes in the 'it-dev' branch
trigger:
  branches:
    include:
    - it-dev

# Parameters that can be passed when the pipeline is run
parameters:
- name: environment
  type: string
  default: 'dev' # Default value of the parameter

# Specifies the pool of virtual machines to run jobs
pool:
  vmImage: 'ubuntu-latest'

# Variables used in the pipeline
variables:
- group: common-variables
- group: ${{ parameters.environment }}-variables
- name: deploymentName
  value: 'Deployment$(Build.BuildId)'

# Steps to be followed in the pipeline
steps:
- task: AzureCLI@2
  displayName: 'Create Resource Group if not exists'
  inputs:
    azureSubscription: '$(serviceConnectionName)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Creates a resource group if it does not already exist
      echo "Creating resource group..."
      az group create --name $(resourceGroupName) --location $(location)

- task: AzureCLI@2
  displayName: 'Deploy VNet ARM Template and Print Outputs'
  inputs:
    azureSubscription: '$(serviceConnectionName)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Deploying VNet ARM Template..."
      VNET_DEPLOYMENT=$(az deployment group create --resource-group $(resourceGroupName) --name $(deploymentName) --template-file plf-network/hubvnet.json --parameters @plf-network/hubvnet.parameters.${{ parameters.environment }}.json)
      echo "VNet Deployment: "
      echo $VNET_DEPLOYMENT | jq
      VNET_OUTPUT=$(echo $VNET_DEPLOYMENT | jq -r '.properties.outputs')
      echo "VNet Output: "
      echo $VNET_OUTPUT
      echo $VNET_OUTPUT > vnetoutput.txt

- task: AzureCLI@2
  displayName: 'Print VNet Output for Debugging'
  inputs:
    azureSubscription: '$(serviceConnectionName)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Prints the value of the VNetOutput variable for debugging
      echo "Printing VNet Output..."
      VNET_OUTPUT=$(cat vnetoutput.txt)
      echo "VNet Output: $VNET_OUTPUT"


- task: AzureCLI@2
  displayName: 'Deploy Firewall ARM Template'
  inputs:
    azureSubscription: '$(serviceConnectionName)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -x
      set -e
      echo "Checking jq installation..."
      jq --version
      echo "Parsing VNet output..."
      VNET_OUTPUT=$(cat vnetoutput.txt)
      SUBNET_ID=$(echo $VNET_OUTPUT | jq -r '.subnetId.value')
      MGMT_SUBNET_ID=$(echo $VNET_OUTPUT | jq -r '.managementSubnetId.value')
      
      echo "VNet Output: $VNET_OUTPUT"
      echo "Subnet ID: $SUBNET_ID"
      echo "Management Subnet ID: $MGMT_SUBNET_ID"
      
      if [ -z "$SUBNET_ID" ] || [ -z "$MGMT_SUBNET_ID" ]; then
        echo "Either SUBNET_ID or MGMT_SUBNET_ID is empty!"
        exit 1
      fi
      
      echo "Deploying Firewall ARM Template..."
      az deployment group create --resource-group $(resourceGroupName) --name $(deploymentName) --template-file plf-network/hubfirewall.json --parameters @plf-network/hubfirewall.parameters.${{ parameters.environment }}.json subnetId=$SUBNET_ID managementSubnetId=$MGMT_SUBNET_ID

- task: AzurePowerShell@5
  displayName: 'Deallocate Firewall for dev'
  inputs:
    azureSubscription: '$(serviceConnectionName)'
    ScriptType: 'InlineScript'
    Inline: |
      $azfw = Get-AzFirewall -Name "plf-hub-fw-dev-wu3" -ResourceGroupName "plf-net-rg-dev-wu3"
      $azfw.Deallocate()
      Set-AzFirewall -AzureFirewall $azfw
    azurePowerShellVersion: 'LatestVersion'
  condition: and(succeeded(), eq('${{ parameters.environment }}', 'dev'))

